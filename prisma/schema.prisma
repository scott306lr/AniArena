// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider = "mysql" //"mysql"//
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    refresh_token_expires_in Int?
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    oauth_token_secret       String? @db.Text
    oauth_token              String? @db.Text
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    player        Player?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Aniarena specific models

model Player {
    id                  String      @id @default(cuid())
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt
    user                User        @relation(fields: [userId], references: [id])
    userId              String      @unique

    name                String
    description         String?     @db.Text
    combater            Combater?   

    unlockedChar        Character[] @relation(name:"unlockedCharacters")
    createdBattles      BattleLog[] @relation(name: "createdBattles")
    attendedBattles       BattleLog[] @relation(name: "attendedBattles")

    likes               BattleLog[] @relation(name: "likes")
    comments            Comment[]
}

model Combater {
    id              String      @id @default(cuid())
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    player          Player      @relation(fields: [playerId], references: [id])
    playerId        String      @unique

    character       Character   @relation(fields: [characterId], references: [id])
    characterId     Int         

    attr            Json
}

model Character {
    id              Int         @id @default(autoincrement())
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    name            String      
    image           String      
    description     String?     @db.Text
    orgAttr         Json
    skills          Skill[]
    
    unlockedBy      Player[]    @relation(name:"unlockedCharacters")
    usedOn          Combater[]
}

model Skill {
    id              Int         @id @default(autoincrement())
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    
    name            String      
    image           String?      
    description     String?     @db.Text
    tags            Tag[]
    Character       Character[] 

    requirement     Json
    cost            Json
}

model Tag {
    id              Int         @id @default(autoincrement())
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    name            String      
    color           String      
    onSkills        Skill[]
}

model BattleLog {
    id          Int         @id @default(autoincrement())
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    creator     Player      @relation(name: "createdBattles", fields: [creatorId], references: [id], onDelete: Cascade)
    attendants  Player[]    @relation(name: "attendedBattles")
    creatorId   String

    content     Json
    likes       Player[]    @relation(name: "likes")
    comments    Comment[]   
}

model Comment {
    id          String      @id @default(cuid())
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    creator     Player      @relation(fields: [creatorId], references: [id])
    creatorId   String 
    
    battleLog   BattleLog   @relation(fields: [battleLogId], references: [id], onDelete: Cascade)    
    battleLogId Int

    content     String      @db.Text
}