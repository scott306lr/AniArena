// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite" //"mysql"//
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Aniarena specific models

model Player {
    id                  String      @id @default(cuid())
    createdAt           DateTime    @default(now())
    updatedAt           DateTime    @updatedAt

    name                String
    description         String?
    unlockedChar        Character[] @relation(name:"unlockedChar")
    
    combater            Character   @relation(name:"combater", fields: [combaterId], references: [id])
    combaterId          Int
    combaterAttr        String

    createdBattles      BattleLog[] @relation(name: "createdBattles")
    attendBattles       BattleLog[] @relation(name: "attendBattles")

    likes               BattleLog[] @relation(name: "likes")
    comments            Comment[]
}

model Character {
    id              Int         @id @default(autoincrement())
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    name            String
    image           String
    description     String?
    orgAttr         String
    skills          Skill[]
    
    usedBy          Player[]    @relation(name:"combater")
    unlockedBy      Player[]    @relation(name:"unlockedChar")
}

model Skill {
    id              Int         @id @default(autoincrement())
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    
    name            String
    image           String
    description     String?
    tags            Tag[]
    Character       Character[] 

    declaration     String?
    requirement     String
    cost            Int
}

model Tag {
    id              Int         @id @default(autoincrement())
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt

    name            String
    color           String
    forSkills       Skill[]
}

model BattleLog {
    id          Int         @id @default(autoincrement())
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    creator     Player      @relation(name: "createdBattles", fields: [creatorId], references: [id])
    attendants  Player[]    @relation(name: "attendBattles")
    creatorId   String

    content     String
    likes       Player[]    @relation(name: "likes")
    comments    Comment[]   
}

model Comment {
    id          String      @id @default(cuid())
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt

    creator     Player      @relation(fields: [creatorId], references: [id])
    battleLog   BattleLog   @relation(fields: [battleLogId], references: [id])
    creatorId   String
    battleLogId Int

    content     String
}