import type { NextPage } from 'next';
import Head from 'next/head';
import { signIn, signOut, useSession } from 'next-auth/react';
import { trpc } from '../utils/trpc';
import { useState } from 'react';
import Modal from '../components/Modal';
import Navbar from '../components/Navbar';
import Image from 'next/future/image';

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navbar />
      <main className="container mx-auto flex min-h-screen flex-col items-center justify-center p-4">
        <h1 className="text-5xl font-extrabold leading-normal text-gray-700 md:text-[5rem]">
          Create <span className="text-purple-300">T3</span> App
        </h1>
        <p className="text-2xl text-gray-700">Example Cards:</p>
        <div className="mt-3 grid gap-3 pt-3 text-center md:grid-cols-2 lg:w-2/3">
          <AuthShowcase />
          <HelloSomeone />
          <MeProfile />
          <PopoverTest />
        </div>
        <div className="mt-3 grid gap-3 pt-3 text-center md:grid-cols-2 lg:w-2/3">
          <RoundImage />
        </div>
      </main>
    </>
  );
};

export default Home;

const RoundImage: React.FC = () => {
  return (
    <div className="rounded-lg border-2 border-gray-500 p-4">
      <Image
        className="h-24 w-24 rounded-full border-2 border-black p-0.5"
        // layout="responsive"
        width={225}
        height={350}
        src="https://media.discordapp.net/attachments/872026548692209738/872045442450485288/6fm6YnX.png"
        alt="testIMG"
      />
    </div>
  );
};

const MeProfile: React.FC = () => {
  // const {data} = trpc.proxy.me.getSession.useQuery();
  const { data: myProfile } = trpc.proxy.me.getProfile.useQuery();
  return (
    <div className="rounded-lg border-2 border-solid border-gray-500 p-4">
      <p className="text-2xl">{myProfile?.name}</p>
      <p className="text-lg">{myProfile?.description}</p>
    </div>
  );
};

const PopoverTest: React.FC = () => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <div className="rounded-lg border-2 border-solid border-gray-500 p-4">
      <button onClick={() => setIsOpen((prev) => !prev)}>{isOpen ? 'Hide' : 'Show'} Popover</button>
      <Modal title="I'm title" isOpen={isOpen} setIsOpen={setIsOpen}>
        <div className="rounded-lg border-2 border-solid border-gray-500 p-4">
          <p className="text-2xl">{"I'm content"}</p>
        </div>
      </Modal>
    </div>
  );
};

const HelloSomeone: React.FC = () => {
  const [name, setName] = useState('');
  const { data: hellotxt, isLoading } = trpc.proxy.auth.getSecretTest.useQuery({ myname: name });

  return (
    <div className="rounded-lg border-2 border-solid border-gray-500 p-4">
      <div className="flex w-full items-center justify-center p-4 text-2xl text-blue-500">
        {!isLoading ? <p>{hellotxt}</p> : <p>Loading..</p>}
      </div>
      <input
        type="text"
        disabled={isLoading}
        onKeyDown={(e) => {
          if (e.key == 'Enter') {
            setName(e.currentTarget.value);
            e.currentTarget.value = '';
          }
        }}
      />
    </div>
  );
};

// Component to showcase protected routes using Auth
const AuthShowcase: React.FC = () => {
  const { data: secretMessage } = trpc.proxy.auth.getSecretMessage.useQuery();
  const { data: sessionData } = useSession();

  return (
    <div className="rounded-lg border-2 border-solid border-gray-500 p-4">
      {sessionData && <p>Logged in as {sessionData?.user?.name}</p>}
      {secretMessage && <p>{secretMessage}</p>}
      <button
        className="rounded-md border-2 border-blue-500 px-4 py-2"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? 'Sign out' : 'Sign in'}
      </button>
    </div>
  );
};

// // Technology component
// type TechnologyCardProps = {
//   name: string;
//   description: string;
//   documentation: string;
// };

// const TechnologyCard = ({ name, description, documentation }: TechnologyCardProps) => {
//   return (
//     <section className="flex flex-col justify-center rounded border-2 border-gray-500 p-6 shadow-xl duration-500 motion-safe:hover:scale-105">
//       <h2 className="text-lg text-gray-700">{name}</h2>
//       <p className="text-sm text-gray-600">{description}</p>
//       <a
//         className="mt-3 text-sm text-violet-500 underline decoration-dotted underline-offset-2"
//         href={documentation}
//         target="_blank"
//         rel="noreferrer"
//       >
//         Documentation
//       </a>
//     </section>
//   );
// };
